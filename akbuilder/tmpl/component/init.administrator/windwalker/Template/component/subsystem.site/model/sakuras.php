<?php
/**
 * Part of Windwalker project. 
 *
 * @copyright  Copyright (C) 2011 - 2014 SMS Taiwan, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

use Windwalker\Data\Data;
use Windwalker\Model\Helper\QueryHelper;
use Windwalker\Model\ListModel;

/**
 * Class FlowerModelSakuras
 *
 * @since 1.0
 */
class FlowerModelSakuras extends ListModel
{
	/**
	 * Property category.
	 *
	 * @var Data
	 */
	protected $category;

	/**
	 * populateState
	 *
	 * @param null $ordering
	 * @param null $direction
	 *
	 * @return  void
	 */
	protected function populateState($ordering = null, $direction = null)
	{
		$queryHelper = $this->container->get('model.sakuras.helper.query');

		$queryHelper->addTable('sakura', '#__flower_sakuras')
			->addTable('category',  '#__categories', 'sakura.catid      = category.id')
			->addTable('user',      '#__users',      'sakura.created_by = user.id')
			->addTable('viewlevel', '#__viewlevels', 'sakura.access     = viewlevel.id')
			->addTable('lang',      '#__languages',  'sakura.language   = lang.lang_code');

		$this->filterFields = array_merge($this->filterFields, $queryHelper->getFilterFields());

		$this->state->set('query.select', $queryHelper->getSelectFields(QueryHelper::COLS_WITH_FIRST));

		// Initialise variables.
		$app   = $this->container->get('app');
		$user  = $this->container->get('user');
		$input = $this->container->get('input');
		$pk    = $this->state->get('category.id', $input->get('id'));

		$filters = array();

		// Load the parameters. Merge Global and Menu Item params into new object
		// =====================================================================================
		$comParams  = $app->getParams();
		$menuParams = new JRegistry;

		if ($menu = $app->getMenu()->getActive())
		{
			$menuParams->loadString($menu->params);
		}

		$mergedParams = clone $menuParams;
		$mergedParams->merge($comParams);

		$this->state->set('params', $mergedParams);
		$params = $mergedParams;

		// Set ViewLevel and user groups
		$groups = implode(',', $user->getAuthorisedViewLevels());

		$this->state->set('access.group', $groups);

		// List state information.
		// =====================================================================================
		$itemid = $input->get('id', 0) . ':' . $input->get('Itemid', 0);
		$this->state->set('layout', $input->getString('layout'));

		// Order
		// =====================================================================================
		$orderCol = $params->get('orderby', 'sakura.ordering');
		$this->state->set('list.ordering', $orderCol);

		// Order Dir
		// =====================================================================================
		$listOrder = $params->get('order_dir', 'asc');
		$this->state->set('list.direction', $listOrder);

		// Limitstart
		// =====================================================================================
		$this->state->set('list.start', $input->get('limitstart', 0));

		// Limit
		// =====================================================================================
		$num_leading = $params->get('num_leading_articles', 1);
		$num_intro   = $params->get('num_intro_articles', 4);
		$num_links   = $params->get('num_links', 4);
		$limit       = $num_leading + $num_intro + $num_links;

		$this->state->set('list.num_leading', $num_leading);
		$this->state->set('list.num_intro', $num_intro);
		$this->state->set('list.num_links', $num_links);
		$this->state->set('list.links', $num_links);
		$this->state->set('list.limit', $limit);

		// Max Level
		// =====================================================================================
		$maxLevel = $params->get('maxLevel');

		if ($maxLevel)
		{
			$this->state->set('filter.max_category_levels', $maxLevel);
		}

		// Edit Access
		// =====================================================================================
		if (($user->authorise('core.edit.state', 'com_flower')) || ($user->authorise('core.edit', 'com_flower')))
		{
			// Filter on published for those who do not have edit or edit.state rights.
			$this->state->set('filter.unpublished', 1);
		}

		// View Level
		// =====================================================================================
		if (!$params->get('show_noauth'))
		{
			$this->state->set('filter.access', true);
		}
		else
		{
			$this->state->set('filter.access', false);
		}

		// Language
		// =====================================================================================
		$this->state->set('filter.language', $app->getLanguageFilter());
	}

	protected function getListQuery()
	{
		// TODO: Change the autogenerated stub

		return parent::getListQuery();
	}

	/**
	 * processFilters
	 *
	 * @param JDatabaseQuery $query
	 * @param array          $filters
	 *
	 * @return  JDatabaseQuery
	 */
	protected function processFilters(\JDatabaseQuery $query, $filters = array())
	{
		// If no state filter, set published >= 0
		if (!isset($filters['sakura.published']))
		{
			$query->where($query->quoteName('sakura.published') . ' >= 0');
		}

		return parent::processFilters($query, $filters);
	}

	/**
	 * configureFilters
	 *
	 * @param \Windwalker\Model\Filter\SearchHelper $filterHelper
	 *
	 * @return  void
	 */
	protected function configureFilters($filterHelper)
	{
	}

	/**
	 * configureSearches
	 *
	 * @param \Windwalker\Model\Filter\SearchHelper $searchHelper
	 *
	 * @return  void
	 */
	protected function configureSearches($searchHelper)
	{
	}

	/**
	 * Method to get category by catid.
	 *
	 * @param   integer $pk Category id.
	 *
	 * @return  mixed   Category object or false.
	 */
	public function getCategory($pk = null)
	{
		if (!empty($this->category))
		{
			return $this->category;
		}

		$pk = $pk ? : $this->state->get('category.id');

		$category = JTable::getInstance('Category');
		$category->load($pk);

		return $this->category = new Data($category->getProperties());
	}
}
