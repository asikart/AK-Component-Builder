<?php
/**
 * @package     Windwalker.Framework
 * @subpackage  AKHelper
 *
 * @copyright   Copyright (C) 2012 Asikart. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @author      Generated by AKHelper - http://asikart.com
 */

 
// no direct access
defined('_JEXEC') or die;


class AKHelperPath
{
	
	static public $default_option = 'com_content' ;
	
	static public $overrides	= array();
	
	/*
	 * function admin
	 * @param $option
	 */
	
	public static function getAdmin($option = null)
	{
		$option = $option ? $option : self::$default_option ;
		
		return $path = JPATH_ADMINISTRATOR."/components/{$option}" ;
	}
	
	
	/*
	 * function getSite
	 * @param $option
	 */
	
	public static function getSite($option = null)
	{
		$option = $option ? $option : self::$default_option ;
		
		return $path = JPATH_SITE."/components/{$option}" ;
	}
	
	
	/*
	 * function get
	 * @param $option = null
	 */
	
	public static function get( $client = null , $option = null)
	{
		$option = $option ? $option : self::$default_option ;
		
		if($client == 'site'){
			return self::getSite($option) ;
		}elseif($client == 'admin'){
			return self::getAdmin($option) ;
		}elseif($client == 'ww' || $client == 'windwalker'){
			return AKPATH_ROOT ;
		}else{
			return $path = JPATH_BASE."/components/{$option}" ;
		}
	}
	
	
	/*
	 * function setOption
	 * @param $option
	 */
	
	public static function setOption($option)
	{
		self::$default_option = $option ;
	}
	
	
	
	/*
	 * function getOption
	 * @param $option
	 */
	
	public static function getOption()
	{
		return self::$default_option ;
	}
	
	
	
	/*
	 * function getWWPath
	 * @param 
	 */
	
	public static function getWWPath()
	{
		return AKPATH_ROOT ;
	}
	
	
	
	/*
	 * function getWWUrl
	 * @param $absolute
	 */
	
	public static function getWWUrl($absolute = false)
	{
		$path = 'libraries/windwalker' ;
		
		if($absolute) {
			return $path = AKHelper::_('uri.pathAddHost', $path);
		}
		else{
			return $path = '/' . AKHelper::_('uri.pathAddSubfolder', $path);
		}
		
	}
	
	
	
	/*
	 * function getOverridePath
	 * @param $path
	 */
	
	public static function getOverridePath($path)
	{
		if( !empty( self::$overrides[ $path ] ) ) {
			return self::$overrides[ $path ] ;
		}else{
			return $path ;
		}
	}
	
	
	/*
	 * function setOverridePath
	 * @param $origin
	 */
	
	public static function addOverridePath($origin, $override)
	{
		self::$overrides[$origin] = $override ;
	}
	
	
	/*
	 * function removeOverridePath
	 * @param $path
	 */
	
	public static function removeOverridePath($path)
	{
		unset( self::$overrides[$path] );
	}
}