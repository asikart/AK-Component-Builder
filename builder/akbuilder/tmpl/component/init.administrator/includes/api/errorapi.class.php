<?php
/**
 * @package     Joomla.Administrator
 * @subpackage  com_{COMPONENT_NAME}
 *
 * @copyright   Copyright (C) 2012 Asikart. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @author      Generated by AKHelper - http://asikart.com
 */

// no direct access
defined('_JEXEC') or die;

/**
 * Api Error.
 */
abstract class ApiError extends JError
{
	
	/**
     * Legacy error handling marker
     *
     * @var    boolean  True to enable legacy error handling using JError, false to use exception handling.  This flag
     *                   is present to allow an easy transition into exception handling for code written against the
     *                   existing JError API in Joomla.
     * @since  11.1
     */
    public static $legacy = false;
 
    /**
     * Array of message levels
     *
     * @var    array 
     * @since  11.1
     */
    protected static $levels = array(E_NOTICE => 'Notice', E_WARNING => 'Warning', E_ERROR => 'Error');
 
    protected static $handlers = array(
        E_NOTICE => array('mode' => 'ignore'),
        E_WARNING => array('mode' => 'ignore'),
        E_ERROR => array('mode' => 'ignore')
    );
 
    protected static $stack = array();
	
	public static $debug = array() ;
	
	public static function raiseError($code, $msg, $info = null)
    {
        // Deprecation warning.
        JLog::add('JError::raiseError() is deprecated.', JLog::WARNING, 'deprecated');
		
		// set error message
        $error = new JObject();
        $error->errorNum = $code ;
        $error->errorMsg = $msg ;
        $error->info = $info ;
        
        // set root
        $response = new JObject();
        $response->set( 'ApiError', $error) ;
		
		// set debug
		if(JDEBUG){
			$debug = new JObject();
			$debug->backtrace = self::renderBacktrace();
			$response->set('debug', $debug);
		}
		
		
		$doc = JFactory::getDocument();
		$doc->setBuffer( json_encode($response) );
		JResponse::setBody($doc->render());
		
		echo JResponse::toString();
        jexit();
    }
	
	
	public static function raiseWarning($code, $msg, $info = null)
	{
		// set error message
        $error = new JObject();
        $error->errorNum = $code ;
        $error->errorMsg = $msg ;
        $error->info = $info ;
		
		// set debug
		if(JDEBUG){
			$debug = new JObject();
			$debug->Warning = $error ;
			//$debug->backtrace = self::renderBacktrace();
			self::$debug[] = $debug;
		}
	}
	
	
	public static function raiseNotice($code, $msg, $info = null)
	{
		// set error message
        $error = new JObject();
        $error->errorNum = $code ;
        $error->errorMsg = $msg ;
        $error->info = $info ;
		
		// set debug
		if(JDEBUG){
			$debug = new JObject();
			$debug->Notice = $error ;
			//$debug->backtrace = self::renderBacktrace();
			self::$debug[] = $debug;
		}
	}
	
	
	/*
	 * function raise
	 * @param arg
	 */
	
	public static function raise($level, $code, $msg, $info = null, $backtrace = false)
	{
		$level = self::$levels[$level] ;
		
		return call_user_func_array( array('ApiError', 'raise'.$level), array($level, $code, $msg, $info) ) ;
	}
	
	public static function errorHandler($errno, $errstr, $errfile, $errline)
	{
		if( JDEBUG ){
			$info = "file: {$errfile} on line {$errline}." ;
		}
		
		self::raise($errno, $errstr, $info, $errline);
		//self::raiseError( $errno , $errstr , $info );
	}
	
	public static function exceptionHandler($exception)
	{
		if( JDEBUG ){
			$info = "file: {$exception->getFile()} on line {$exception->getLine()}." ;
		}
		
		self::raiseError( $exception->getCode() , $exception->getMessage() , $info );
	}
	
	public static function attachHandler()
    {
        // Deprecation warning.
        JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');
 
        set_error_handler(array(__CLASS__, 'errorHandler'));
        //set_exception_handler(array(__CLASS__, 'exceptionHandler'));
    }
    
    public static function renderBacktrace($error=null)
    {
    	$backtrace = null ;
    	$r = array();
    	$j = 1 ;
    	
    	if( is_object($error) ){
			$backtrace = $error->getTrace();
		}
		
		if( !$backtrace ){
			$backtrace = debug_backtrace();
		}
		
		for ($i = count($backtrace)-1; $i >= 0 ; $i--)
        {
            if (isset($backtrace[$i]['class'])) {
                    $r[$j] = $backtrace[$i]['class'].$backtrace[$i]['type'].$backtrace[$i]['function']."()" ;
            }
            else {
                    $r[$j] = $backtrace[$i]['function']."() ".
						"in {$backtrace[$i]['file']} on line {$backtrace[$i]['line']}";
            }
            
			if( isset($backtrace[$i]['file']) ){
				$r['j'] = " in {$backtrace[$i]['file']} on line {$backtrace[$i]['line']}";
			}
			
            $j++;
        }
        
        return $r ;
	}
}
