<?php
/**
 * @package     Joomla.Administrator
 * @subpackage  com_{COMPONENT_NAME}
 *
 * @copyright   Copyright (C) 2012 Asikart. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @author      Generated by AKHelper - http://asikart.com
 */

// no direct access
defined('_JEXEC') or die;

jimport('joomla.application.component.modellist');

/**
 * Methods supporting a list of {COMPONENT_NAME_UCFIRST} records.
 */
class {COMPONENT_NAME_UCFIRST}Model{CONTROLLER_NAMES_UCFIRST} extends JModelList
{
	/**
	 * @var		string	The prefix to use with controller messages.
	 * @since	1.6
	 */
	protected 	$text_prefix = 'COM_{COMPONENT_NAME_UC}';
	
	public 		$component = '{COMPONENT_NAME}' ;
	public 		$item_name = '{CONTROLLER_NAME}' ;
	public 		$list_name = '{CONTROLLER_NAMES}' ;
	
	
    /**
     * Constructor.
     *
     * @param    array    An optional associative array of configuration settings.
     * @see        JController
     * @since    1.6
     */
    public function __construct($config = array())
    {
		
		// Set query tables
		// ========================================================================
		$config['tables'] = array(
			'a' => '#__{COMPONENT_NAME}_{CONTROLLER_NAMES}',
			'b' => '#__categories',
			'c' => '#__users',
			'd' => '#__viewlevels',
			'e' => '#__languages'
		);
		
		
		
		// Set filter fields
		// ========================================================================
        if (empty($config['filter_fields'])) {
            $config['filter_fields'] = array(
                'filter_order_Dir', 'filter_order'
            );
			
            $config['filter_fields'] = {COMPONENT_NAME_UCFIRST}Helper::_('db.mergeFilterFields', $config['filter_fields'] , $config['tables'] );
        }
		
		
		
		// Other settings
		// ========================================================================
		$config['fulltext_search'] 	= true ;
		
		$config['core_sidebar'] 	= false ;
		
		
		$this->config = $config ;
		
        parent::__construct($config);
    }

	
	
	/**
	 * Returns a reference to the a Table object, always creating it.
	 *
	 * @param	type	The table type to instantiate
	 * @param	string	A prefix for the table class name. Optional.
	 * @param	array	Configuration array for model. Optional.
	 * @return	JTable	A database object
	 * @since	1.6
	 */
	public function getTable($type = '{CONTROLLER_NAME_UCFIRST}', $prefix = '{COMPONENT_NAME_UCFIRST}Table', $config = array())
	{	
		return parent::getTable( $type , $prefix , $config );
	}
	
	
	
	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 */
	protected function populateState($ordering = null, $direction = null)
	{
		// Initialise variables.
		$app = JFactory::getApplication();
		
		// Load the parameters.
		$params = JComponentHelper::getParams($this->option);
		$this->setState('params', $params);
		
		// Fulltext search
		if(isset($this->config['fulltext_search'])){
			$this->setState( 'search.fulltext', $this->config['fulltext_search'] );
		}
		
		// Core sidebar
		if(isset($this->config['core_sidebar'])){
			$this->setState( 'core_sidebar', $this->config['core_sidebar'] );
		}
		
		
		
		// Set all filter fields
		// ========================================================================
		
		// Set Filters
		$filter = $app->getUserStateFromRequest($this->context.'.field.filter', 'filter');
		$filter_fields = array();
		foreach( $this->filter_fields as $field ){
			$filter_fields[$field] = JArrayHelper::getValue($filter, $field, '') ;
		}
		$this->setState('filter', $filter_fields );
		
		// Set Searches
		$search = $app->getUserStateFromRequest($this->context.'.field.search', 'search');
		if(in_array(JArrayHelper::getValue($search, 'field'), $this->filter_fields) || $this->config['fulltext_search']){
			$this->setState('search', $search );
		}
		
		

		// List state information.
		if(!$ordering){
			$ordering = 'a.ordering' ;
		}
		
		parent::populateState($ordering, 'asc');
	}
	

	
	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param	string		$id	A prefix for the store id.
	 * @return	string		A store id.
	 * @since	1.6
	 */
	protected function getStoreId($id = '')
	{
		// Compile the store id.
		$id.= ':' . json_encode($this->getState('search'));
		$id.= ':' . json_encode($this->getState('filter'));

		return parent::getStoreId($id);
	}
	
	
	/**
	 * Method to get list page filter form.
	 *
	 * @return	object		JForm object.
	 * @since	2.5
	 */
	
	public function getFilter()
	{
		if(!empty($this->filter)){
			return $this->filter ;
		}
		
		// Get filter inputs from from xml files in /models/form.
		JForm::addFormPath(JPATH_COMPONENT.'/models/forms');
        JForm::addFieldPath(JPATH_COMPONENT.'/models/fields');
		
		
		// Generate sidebar filter by Joomla! core system.
		if( $this->config['core_sidebar'] ) {
			
			// Get filter inputs from raw xml file.
			$file 	= AKHelper::_('path.get').'/models/forms/'.$this->list_name.'_filter.xml' ;
			$xml 	= simplexml_load_file($file);
			
			$filters 	= $xml->xpath('//fieldset[@name="filter_sidebar"]') ;
			$filters	= $filters[0]->field;
			
			
			$form['filter_sidebar'] 	= $filters ;
		}
		
		
		// load forms
		$form['search'] = JForm::getInstance("{$this->option}.{$this->list_name}.search", $this->list_name.'_search', array( 'control' => 'search' ,'load_data'=>'true'));
		$form['filter'] = JForm::getInstance("{$this->option}.{$this->list_name}.filter", $this->list_name.'_filter', array( 'control' => 'filter' ,'load_data'=>'true'));
		
		
		// Get default data of this form. Any State key same as form key will auto match.
		$form['search']->bind( $this->getState('search') );
		$form['filter']->bind( $this->getState('filter') );
		
		
		return $this->filter = $form;
	}
	
	
	
	/*
	 * function getCategory
	 * @param 
	 */
	
	public function getCategory()
	{
		if(!empty($this->category)){
			return $this->category ;
		}
		
		$pk = $this->getState('category.id') ;
		
		$this->category  = JTable::getInstance('Category');
		$this->category->load($pk);
		
		return $this->category ;
	}
	
	
	
	/*
	 * function getFulltextSearch
	 * @param 
	 */
	
	public function getFullSearchFields()
	{
		$file = JPATH_COMPONENT.'/models/forms/'.$this->list_name.'_search.xml' ;
		
		$xml = simplexml_load_file($file);
		$field = $xml->xpath('//field[@name="field"]') ;
		$options = $field[0]->option ;
		
		$fields = array();
		foreach( $options as $option ):
			$attr = $option->attributes();
			if(in_array($attr['value'], $this->filter_fields)){
				$fields[] = $attr['value'];
			}
		endforeach;
		
		return $fields ;
	}
	
	

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return	JDatabaseQuery
	 * @since	1.6
	 */
	protected function getListQuery()
	{
		// Get some data
		// ========================================================================
		
		// Create a new query object.
		$db		= $this->getDbo();
		$q		= $db->getQuery(true);
		$order 	= $this->getState('list.ordering' , 'a.id');
		$dir	= $this->getState('list.direction', 'asc');

		// Filter and Search
		$filter = $this->getState('filter',array()) ;
		$search = $this->getState('search') ;
		
		$layout = JRequest::getVar('layout') ;
		$avoid	= JRequest::getVar('avoid') ;
		$show_root = JRequest::getVar('show_root') ;
		
		
		
		// Search
		// ========================================================================
		if($search['index']){
			
			if($this->getState( 'search.fulltext' )){
				$fields = $this->getFullSearchFields();
				
				foreach( $fields as &$field ):
					$field = "{$field} LIKE '%{$search['index']}%'" ;
				endforeach;
				
				if(count($fields))
				$q->where( "( ".implode(' OR ', $fields )." )" );
				
			}else{
				$q->where("{$search['field']} LIKE '%{$search['index']}%'");
			}
			
		}
		
		
		
		// Filter
		// ========================================================================
		foreach($filter as $k => $v ){
			if($v !== '' && $v != '*'){
				$q->where("{$k}='{$v}'") ;
			}
		}
		
		// published
		if(empty($filter['a.published'])){
			$q->where("a.published >= 0") ;
		}
		
		
		// Build query
		// ========================================================================
		
		// get select columns
		$select = {COMPONENT_NAME_UCFIRST}Helper::_( 'db.getSelectList', $this->config['tables'] );
		
		//build query
		$q->select($select)
			->from('#__{COMPONENT_NAME}_{CONTROLLER_NAMES} AS a')
			->leftJoin('#__categories 	AS b ON a.catid = b.id')
			->leftJoin('#__users 		AS c ON a.created_by = c.id')
			->leftJoin('#__viewlevels 	AS d ON a.access = d.id')
			->leftJoin('#__languages 	AS e ON a.language = e.lang_code')
			//->where("")
			->order( " {$order} {$dir}" ) ;
		
		return $q;
	}
}
